// This file was generated by counterfeiter
package dbfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/jianqiu/vm-pool-server/db"
	"github.com/jianqiu/vm-pool-server/models"
)

type FakeDB struct {
	VirtualGuestsStub        func(logger lager.Logger, filter models.VirtualGuestFilter) ([]*models.VirtualGuest, error)
	virtualGuestsMutex       sync.RWMutex
	virtualGuestsArgsForCall []struct {
		logger lager.Logger
		filter models.VirtualGuestFilter
	}
	virtualGuestsReturns struct {
		result1 []*models.VirtualGuest
		result2 error
	}
	VirtualGuestByCIDStub        func(logger lager.Logger, cid string) (*models.VirtualGuest, error)
	virtualGuestByCIDMutex       sync.RWMutex
	virtualGuestByCIDArgsForCall []struct {
		logger lager.Logger
		cid    string
	}
	virtualGuestByCIDReturns struct {
		result1 *models.VirtualGuest
		result2 error
	}
	VirtualGuestByIPStub        func(logger lager.Logger, ip string) (*models.VirtualGuest, error)
	virtualGuestByIPMutex       sync.RWMutex
	virtualGuestByIPArgsForCall []struct {
		logger lager.Logger
		ip     string
	}
	virtualGuestByIPReturns struct {
		result1 *models.VirtualGuest
		result2 error
	}
	InsertVirtualGuestToPoolStub        func(logger lager.Logger, virtualGuest *models.VirtualGuest) error
	insertVirtualGuestToPoolMutex       sync.RWMutex
	insertVirtualGuestToPoolArgsForCall []struct {
		logger       lager.Logger
		virtualGuest *models.VirtualGuest
	}
	insertVirtualGuestToPoolReturns struct {
		result1 error
	}
	ChangeVirtualGuestToUseStub        func(logger lager.Logger, cid int32) (bool, error)
	changeVirtualGuestToUseMutex       sync.RWMutex
	changeVirtualGuestToUseArgsForCall []struct {
		logger lager.Logger
		cid    int32
	}
	changeVirtualGuestToUseReturns struct {
		result1 bool
		result2 error
	}
	ChangeVirtualGuestToDeletedStub        func(logger lager.Logger, cid int32) (bool, error)
	changeVirtualGuestToDeletedMutex       sync.RWMutex
	changeVirtualGuestToDeletedArgsForCall []struct {
		logger lager.Logger
		cid    int32
	}
	changeVirtualGuestToDeletedReturns struct {
		result1 bool
		result2 error
	}
	DeleteVirtualGuestFromPoolStub        func(logger lager.Logger, cid int32) (bool, error)
	deleteVirtualGuestFromPoolMutex       sync.RWMutex
	deleteVirtualGuestFromPoolArgsForCall []struct {
		logger lager.Logger
		cid    int32
	}
	deleteVirtualGuestFromPoolReturns struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDB) VirtualGuests(logger lager.Logger, filter models.VirtualGuestFilter) ([]*models.VirtualGuest, error) {
	fake.virtualGuestsMutex.Lock()
	fake.virtualGuestsArgsForCall = append(fake.virtualGuestsArgsForCall, struct {
		logger lager.Logger
		filter models.VirtualGuestFilter
	}{logger, filter})
	fake.recordInvocation("VirtualGuests", []interface{}{logger, filter})
	fake.virtualGuestsMutex.Unlock()
	if fake.VirtualGuestsStub != nil {
		return fake.VirtualGuestsStub(logger, filter)
	} else {
		return fake.virtualGuestsReturns.result1, fake.virtualGuestsReturns.result2
	}
}

func (fake *FakeDB) VirtualGuestsCallCount() int {
	fake.virtualGuestsMutex.RLock()
	defer fake.virtualGuestsMutex.RUnlock()
	return len(fake.virtualGuestsArgsForCall)
}

func (fake *FakeDB) VirtualGuestsArgsForCall(i int) (lager.Logger, models.VirtualGuestFilter) {
	fake.virtualGuestsMutex.RLock()
	defer fake.virtualGuestsMutex.RUnlock()
	return fake.virtualGuestsArgsForCall[i].logger, fake.virtualGuestsArgsForCall[i].filter
}

func (fake *FakeDB) VirtualGuestsReturns(result1 []*models.VirtualGuest, result2 error) {
	fake.VirtualGuestsStub = nil
	fake.virtualGuestsReturns = struct {
		result1 []*models.VirtualGuest
		result2 error
	}{result1, result2}
}

func (fake *FakeDB) VirtualGuestByCID(logger lager.Logger, cid string) (*models.VirtualGuest, error) {
	fake.virtualGuestByCIDMutex.Lock()
	fake.virtualGuestByCIDArgsForCall = append(fake.virtualGuestByCIDArgsForCall, struct {
		logger lager.Logger
		cid    string
	}{logger, cid})
	fake.recordInvocation("VirtualGuestByCID", []interface{}{logger, cid})
	fake.virtualGuestByCIDMutex.Unlock()
	if fake.VirtualGuestByCIDStub != nil {
		return fake.VirtualGuestByCIDStub(logger, cid)
	} else {
		return fake.virtualGuestByCIDReturns.result1, fake.virtualGuestByCIDReturns.result2
	}
}

func (fake *FakeDB) VirtualGuestByCIDCallCount() int {
	fake.virtualGuestByCIDMutex.RLock()
	defer fake.virtualGuestByCIDMutex.RUnlock()
	return len(fake.virtualGuestByCIDArgsForCall)
}

func (fake *FakeDB) VirtualGuestByCIDArgsForCall(i int) (lager.Logger, string) {
	fake.virtualGuestByCIDMutex.RLock()
	defer fake.virtualGuestByCIDMutex.RUnlock()
	return fake.virtualGuestByCIDArgsForCall[i].logger, fake.virtualGuestByCIDArgsForCall[i].cid
}

func (fake *FakeDB) VirtualGuestByCIDReturns(result1 *models.VirtualGuest, result2 error) {
	fake.VirtualGuestByCIDStub = nil
	fake.virtualGuestByCIDReturns = struct {
		result1 *models.VirtualGuest
		result2 error
	}{result1, result2}
}

func (fake *FakeDB) VirtualGuestByIP(logger lager.Logger, ip string) (*models.VirtualGuest, error) {
	fake.virtualGuestByIPMutex.Lock()
	fake.virtualGuestByIPArgsForCall = append(fake.virtualGuestByIPArgsForCall, struct {
		logger lager.Logger
		ip     string
	}{logger, ip})
	fake.recordInvocation("VirtualGuestByIP", []interface{}{logger, ip})
	fake.virtualGuestByIPMutex.Unlock()
	if fake.VirtualGuestByIPStub != nil {
		return fake.VirtualGuestByIPStub(logger, ip)
	} else {
		return fake.virtualGuestByIPReturns.result1, fake.virtualGuestByIPReturns.result2
	}
}

func (fake *FakeDB) VirtualGuestByIPCallCount() int {
	fake.virtualGuestByIPMutex.RLock()
	defer fake.virtualGuestByIPMutex.RUnlock()
	return len(fake.virtualGuestByIPArgsForCall)
}

func (fake *FakeDB) VirtualGuestByIPArgsForCall(i int) (lager.Logger, string) {
	fake.virtualGuestByIPMutex.RLock()
	defer fake.virtualGuestByIPMutex.RUnlock()
	return fake.virtualGuestByIPArgsForCall[i].logger, fake.virtualGuestByIPArgsForCall[i].ip
}

func (fake *FakeDB) VirtualGuestByIPReturns(result1 *models.VirtualGuest, result2 error) {
	fake.VirtualGuestByIPStub = nil
	fake.virtualGuestByIPReturns = struct {
		result1 *models.VirtualGuest
		result2 error
	}{result1, result2}
}

func (fake *FakeDB) InsertVirtualGuestToPool(logger lager.Logger, virtualGuest *models.VirtualGuest) error {
	fake.insertVirtualGuestToPoolMutex.Lock()
	fake.insertVirtualGuestToPoolArgsForCall = append(fake.insertVirtualGuestToPoolArgsForCall, struct {
		logger       lager.Logger
		virtualGuest *models.VirtualGuest
	}{logger, virtualGuest})
	fake.recordInvocation("InsertVirtualGuestToPool", []interface{}{logger, virtualGuest})
	fake.insertVirtualGuestToPoolMutex.Unlock()
	if fake.InsertVirtualGuestToPoolStub != nil {
		return fake.InsertVirtualGuestToPoolStub(logger, virtualGuest)
	} else {
		return fake.insertVirtualGuestToPoolReturns.result1
	}
}

func (fake *FakeDB) InsertVirtualGuestToPoolCallCount() int {
	fake.insertVirtualGuestToPoolMutex.RLock()
	defer fake.insertVirtualGuestToPoolMutex.RUnlock()
	return len(fake.insertVirtualGuestToPoolArgsForCall)
}

func (fake *FakeDB) InsertVirtualGuestToPoolArgsForCall(i int) (lager.Logger, *models.VirtualGuest) {
	fake.insertVirtualGuestToPoolMutex.RLock()
	defer fake.insertVirtualGuestToPoolMutex.RUnlock()
	return fake.insertVirtualGuestToPoolArgsForCall[i].logger, fake.insertVirtualGuestToPoolArgsForCall[i].virtualGuest
}

func (fake *FakeDB) InsertVirtualGuestToPoolReturns(result1 error) {
	fake.InsertVirtualGuestToPoolStub = nil
	fake.insertVirtualGuestToPoolReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDB) ChangeVirtualGuestToUse(logger lager.Logger, cid int32) (bool, error) {
	fake.changeVirtualGuestToUseMutex.Lock()
	fake.changeVirtualGuestToUseArgsForCall = append(fake.changeVirtualGuestToUseArgsForCall, struct {
		logger lager.Logger
		cid    int32
	}{logger, cid})
	fake.recordInvocation("ChangeVirtualGuestToUse", []interface{}{logger, cid})
	fake.changeVirtualGuestToUseMutex.Unlock()
	if fake.ChangeVirtualGuestToUseStub != nil {
		return fake.ChangeVirtualGuestToUseStub(logger, cid)
	} else {
		return fake.changeVirtualGuestToUseReturns.result1, fake.changeVirtualGuestToUseReturns.result2
	}
}

func (fake *FakeDB) ChangeVirtualGuestToUseCallCount() int {
	fake.changeVirtualGuestToUseMutex.RLock()
	defer fake.changeVirtualGuestToUseMutex.RUnlock()
	return len(fake.changeVirtualGuestToUseArgsForCall)
}

func (fake *FakeDB) ChangeVirtualGuestToUseArgsForCall(i int) (lager.Logger, int32) {
	fake.changeVirtualGuestToUseMutex.RLock()
	defer fake.changeVirtualGuestToUseMutex.RUnlock()
	return fake.changeVirtualGuestToUseArgsForCall[i].logger, fake.changeVirtualGuestToUseArgsForCall[i].cid
}

func (fake *FakeDB) ChangeVirtualGuestToUseReturns(result1 bool, result2 error) {
	fake.ChangeVirtualGuestToUseStub = nil
	fake.changeVirtualGuestToUseReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeDB) ChangeVirtualGuestToDeleted(logger lager.Logger, cid int32) (bool, error) {
	fake.changeVirtualGuestToDeletedMutex.Lock()
	fake.changeVirtualGuestToDeletedArgsForCall = append(fake.changeVirtualGuestToDeletedArgsForCall, struct {
		logger lager.Logger
		cid    int32
	}{logger, cid})
	fake.recordInvocation("ChangeVirtualGuestToDeleted", []interface{}{logger, cid})
	fake.changeVirtualGuestToDeletedMutex.Unlock()
	if fake.ChangeVirtualGuestToDeletedStub != nil {
		return fake.ChangeVirtualGuestToDeletedStub(logger, cid)
	} else {
		return fake.changeVirtualGuestToDeletedReturns.result1, fake.changeVirtualGuestToDeletedReturns.result2
	}
}

func (fake *FakeDB) ChangeVirtualGuestToDeletedCallCount() int {
	fake.changeVirtualGuestToDeletedMutex.RLock()
	defer fake.changeVirtualGuestToDeletedMutex.RUnlock()
	return len(fake.changeVirtualGuestToDeletedArgsForCall)
}

func (fake *FakeDB) ChangeVirtualGuestToDeletedArgsForCall(i int) (lager.Logger, int32) {
	fake.changeVirtualGuestToDeletedMutex.RLock()
	defer fake.changeVirtualGuestToDeletedMutex.RUnlock()
	return fake.changeVirtualGuestToDeletedArgsForCall[i].logger, fake.changeVirtualGuestToDeletedArgsForCall[i].cid
}

func (fake *FakeDB) ChangeVirtualGuestToDeletedReturns(result1 bool, result2 error) {
	fake.ChangeVirtualGuestToDeletedStub = nil
	fake.changeVirtualGuestToDeletedReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeDB) DeleteVirtualGuestFromPool(logger lager.Logger, cid int32) (bool, error) {
	fake.deleteVirtualGuestFromPoolMutex.Lock()
	fake.deleteVirtualGuestFromPoolArgsForCall = append(fake.deleteVirtualGuestFromPoolArgsForCall, struct {
		logger lager.Logger
		cid    int32
	}{logger, cid})
	fake.recordInvocation("DeleteVirtualGuestFromPool", []interface{}{logger, cid})
	fake.deleteVirtualGuestFromPoolMutex.Unlock()
	if fake.DeleteVirtualGuestFromPoolStub != nil {
		return fake.DeleteVirtualGuestFromPoolStub(logger, cid)
	} else {
		return fake.deleteVirtualGuestFromPoolReturns.result1, fake.deleteVirtualGuestFromPoolReturns.result2
	}
}

func (fake *FakeDB) DeleteVirtualGuestFromPoolCallCount() int {
	fake.deleteVirtualGuestFromPoolMutex.RLock()
	defer fake.deleteVirtualGuestFromPoolMutex.RUnlock()
	return len(fake.deleteVirtualGuestFromPoolArgsForCall)
}

func (fake *FakeDB) DeleteVirtualGuestFromPoolArgsForCall(i int) (lager.Logger, int32) {
	fake.deleteVirtualGuestFromPoolMutex.RLock()
	defer fake.deleteVirtualGuestFromPoolMutex.RUnlock()
	return fake.deleteVirtualGuestFromPoolArgsForCall[i].logger, fake.deleteVirtualGuestFromPoolArgsForCall[i].cid
}

func (fake *FakeDB) DeleteVirtualGuestFromPoolReturns(result1 bool, result2 error) {
	fake.DeleteVirtualGuestFromPoolStub = nil
	fake.deleteVirtualGuestFromPoolReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.virtualGuestsMutex.RLock()
	defer fake.virtualGuestsMutex.RUnlock()
	fake.virtualGuestByCIDMutex.RLock()
	defer fake.virtualGuestByCIDMutex.RUnlock()
	fake.virtualGuestByIPMutex.RLock()
	defer fake.virtualGuestByIPMutex.RUnlock()
	fake.insertVirtualGuestToPoolMutex.RLock()
	defer fake.insertVirtualGuestToPoolMutex.RUnlock()
	fake.changeVirtualGuestToUseMutex.RLock()
	defer fake.changeVirtualGuestToUseMutex.RUnlock()
	fake.changeVirtualGuestToDeletedMutex.RLock()
	defer fake.changeVirtualGuestToDeletedMutex.RUnlock()
	fake.deleteVirtualGuestFromPoolMutex.RLock()
	defer fake.deleteVirtualGuestFromPoolMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.DB = new(FakeDB)
