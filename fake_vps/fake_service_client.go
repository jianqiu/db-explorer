// This file was generated by counterfeiter
package fake_vps

import (
	"sync"

	"code.cloudfoundry.org/lager"
	vps "github.com/jianqiu/vm-pool-server"
	"github.com/jianqiu/vm-pool-server/models"
)

type FakeServiceClient struct {
	VirtualGuestByIdStub        func(logger lager.Logger, cid int32) (*models.VirtualGuest, error)
	virtualGuestByIdMutex       sync.RWMutex
	virtualGuestByIdArgsForCall []struct {
		logger lager.Logger
		cid    int32
	}
	virtualGuestByIdReturns struct {
		result1 *models.VirtualGuest
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceClient) VirtualGuestById(logger lager.Logger, cid int32) (*models.VirtualGuest, error) {
	fake.virtualGuestByIdMutex.Lock()
	fake.virtualGuestByIdArgsForCall = append(fake.virtualGuestByIdArgsForCall, struct {
		logger lager.Logger
		cid    int32
	}{logger, cid})
	fake.recordInvocation("VirtualGuestById", []interface{}{logger, cid})
	fake.virtualGuestByIdMutex.Unlock()
	if fake.VirtualGuestByIdStub != nil {
		return fake.VirtualGuestByIdStub(logger, cid)
	} else {
		return fake.virtualGuestByIdReturns.result1, fake.virtualGuestByIdReturns.result2
	}
}

func (fake *FakeServiceClient) VirtualGuestByIdCallCount() int {
	fake.virtualGuestByIdMutex.RLock()
	defer fake.virtualGuestByIdMutex.RUnlock()
	return len(fake.virtualGuestByIdArgsForCall)
}

func (fake *FakeServiceClient) VirtualGuestByIdArgsForCall(i int) (lager.Logger, int32) {
	fake.virtualGuestByIdMutex.RLock()
	defer fake.virtualGuestByIdMutex.RUnlock()
	return fake.virtualGuestByIdArgsForCall[i].logger, fake.virtualGuestByIdArgsForCall[i].cid
}

func (fake *FakeServiceClient) VirtualGuestByIdReturns(result1 *models.VirtualGuest, result2 error) {
	fake.VirtualGuestByIdStub = nil
	fake.virtualGuestByIdReturns = struct {
		result1 *models.VirtualGuest
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.virtualGuestByIdMutex.RLock()
	defer fake.virtualGuestByIdMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeServiceClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ vps.ServiceClient = new(FakeServiceClient)
