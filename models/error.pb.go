// Code generated by protoc-gen-gogo.
// source: error.proto
// DO NOT EDIT!

/*
	Package models is a generated protocol buffer package.

	It is generated from these files:
		error.proto
		virtual_guest.proto
		vm_requests.proto

	It has these top-level messages:
		Error
		VirtualGuest
		VMLifecycleResponse
		VMsRequest
		VMsResponse
		VMByCidRequest
		VMResponse
*/
package models

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Error_Type int32

const (
	Error_UnknownError           Error_Type = 0
	Error_InvalidDomain          Error_Type = 1
	Error_UnkownVersion          Error_Type = 2
	Error_InvalidRecord          Error_Type = 3
	Error_InvalidRequest         Error_Type = 4
	Error_InvalidResponse        Error_Type = 5
	Error_InvalidProtobufMessage Error_Type = 6
	Error_InvalidJSON            Error_Type = 7
	Error_FailedToOpenEnvelope   Error_Type = 8
	Error_InvalidStateTransition Error_Type = 9
	Error_Unauthorized           Error_Type = 10
	Error_ResourceConflict       Error_Type = 11
	Error_ResourceExists         Error_Type = 12
	Error_ResourceNotFound       Error_Type = 13
	Error_RouterError            Error_Type = 14
	Error_SoftLayerAPIError      Error_Type = 15
	Error_GUIDGeneration         Error_Type = 26
	Error_Deserialize            Error_Type = 27
	Error_Deadlock               Error_Type = 28
	Error_Unrecoverable          Error_Type = 29
)

var Error_Type_name = map[int32]string{
	0:  "UnknownError",
	1:  "InvalidDomain",
	2:  "UnkownVersion",
	3:  "InvalidRecord",
	4:  "InvalidRequest",
	5:  "InvalidResponse",
	6:  "InvalidProtobufMessage",
	7:  "InvalidJSON",
	8:  "FailedToOpenEnvelope",
	9:  "InvalidStateTransition",
	10: "Unauthorized",
	11: "ResourceConflict",
	12: "ResourceExists",
	13: "ResourceNotFound",
	14: "RouterError",
	15: "SoftLayerAPIError",
	26: "GUIDGeneration",
	27: "Deserialize",
	28: "Deadlock",
	29: "Unrecoverable",
}
var Error_Type_value = map[string]int32{
	"UnknownError":           0,
	"InvalidDomain":          1,
	"UnkownVersion":          2,
	"InvalidRecord":          3,
	"InvalidRequest":         4,
	"InvalidResponse":        5,
	"InvalidProtobufMessage": 6,
	"InvalidJSON":            7,
	"FailedToOpenEnvelope":   8,
	"InvalidStateTransition": 9,
	"Unauthorized":           10,
	"ResourceConflict":       11,
	"ResourceExists":         12,
	"ResourceNotFound":       13,
	"RouterError":            14,
	"SoftLayerAPIError":      15,
	"GUIDGeneration":         26,
	"Deserialize":            27,
	"Deadlock":               28,
	"Unrecoverable":          29,
}

func (x Error_Type) Enum() *Error_Type {
	p := new(Error_Type)
	*p = x
	return p
}
func (x Error_Type) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(Error_Type_name, int32(x))
}
func (x *Error_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Error_Type_value, data, "Error_Type")
	if err != nil {
		return err
	}
	*x = Error_Type(value)
	return nil
}
func (Error_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorError, []int{0, 0} }

type Error struct {
	Type    Error_Type `protobuf:"varint,1,opt,name=type,enum=models.Error_Type" json:"type"`
	Message string     `protobuf:"bytes,2,opt,name=message" json:"message"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptorError, []int{0} }

func (m *Error) GetType() Error_Type {
	if m != nil {
		return m.Type
	}
	return Error_UnknownError
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Error)(nil), "models.Error")
	proto.RegisterEnum("models.Error_Type", Error_Type_name, Error_Type_value)
}
func (x Error_Type) String() string {
	s, ok := Error_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.Error{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringError(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringError(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *Error) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Error) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintError(data, i, uint64(m.Type))
	data[i] = 0x12
	i++
	i = encodeVarintError(data, i, uint64(len(m.Message)))
	i += copy(data[i:], m.Message)
	return i, nil
}

func encodeFixed64Error(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Error(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintError(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Error) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovError(uint64(m.Type))
	l = len(m.Message)
	n += 1 + l + sovError(uint64(l))
	return n
}

func sovError(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozError(x uint64) (n int) {
	return sovError(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Error{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringError(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Error) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (Error_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipError(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipError(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowError
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowError
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowError
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthError
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowError
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipError(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthError = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowError   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("error.proto", fileDescriptorError) }

var fileDescriptorError = []byte{
	// 463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x90, 0xbd, 0x72, 0x13, 0x31,
	0x14, 0x85, 0x57, 0xb1, 0xf3, 0x27, 0x3b, 0xb6, 0x22, 0x02, 0xe3, 0x31, 0x20, 0x32, 0xa9, 0x52,
	0x84, 0xcd, 0x0c, 0x6f, 0x40, 0xb0, 0x93, 0x31, 0x03, 0x49, 0xc6, 0x3f, 0xf4, 0xf2, 0xee, 0xb5,
	0xa3, 0xf1, 0x5a, 0x77, 0x91, 0xb4, 0x0e, 0x4e, 0xc5, 0x23, 0xf0, 0x02, 0xf4, 0x3c, 0x4a, 0xca,
	0x94, 0x54, 0x0c, 0x5e, 0x1a, 0xca, 0x34, 0xf4, 0xcc, 0xee, 0x3a, 0x19, 0x77, 0xd2, 0x77, 0xee,
	0x39, 0x73, 0xee, 0xa5, 0x15, 0x30, 0x06, 0x8d, 0x1f, 0x1b, 0x74, 0xc8, 0x37, 0xa6, 0x18, 0x42,
	0x64, 0x9b, 0xaf, 0xc7, 0xca, 0x5d, 0x25, 0x43, 0x3f, 0xc0, 0xe9, 0xf1, 0x18, 0xc7, 0x78, 0x9c,
	0xcb, 0xc3, 0x64, 0x94, 0xff, 0xf2, 0x4f, 0xfe, 0x2a, 0x6c, 0x07, 0xff, 0x4a, 0x74, 0xbd, 0x9d,
	0xc5, 0xf0, 0x23, 0x5a, 0x76, 0xf3, 0x18, 0x1a, 0x64, 0x9f, 0x1c, 0xd6, 0xde, 0x70, 0xbf, 0xc8,
	0xf3, 0x73, 0xd1, 0xef, 0xcf, 0x63, 0x38, 0x29, 0xdf, 0xfe, 0x7a, 0xe5, 0x75, 0xf3, 0x29, 0x2e,
	0xe8, 0xe6, 0x14, 0xac, 0x95, 0x63, 0x68, 0xac, 0xed, 0x93, 0xc3, 0xed, 0xa5, 0xf8, 0x00, 0x0f,
	0xbe, 0x97, 0x68, 0x39, 0x33, 0x71, 0x46, 0xab, 0x03, 0x3d, 0xd1, 0x78, 0xad, 0xf3, 0x24, 0xe6,
	0xf1, 0x5d, 0xba, 0xd3, 0xd1, 0x33, 0x19, 0xa9, 0xb0, 0x85, 0x53, 0xa9, 0x34, 0x23, 0x19, 0x1a,
	0xe8, 0x09, 0x5e, 0xeb, 0x4f, 0x60, 0xac, 0x42, 0xcd, 0xd6, 0x56, 0xa6, 0xba, 0x10, 0xa0, 0x09,
	0x59, 0x89, 0x73, 0x5a, 0x7b, 0x44, 0x9f, 0x13, 0xb0, 0x8e, 0x95, 0xf9, 0x13, 0x5a, 0x7f, 0x64,
	0x36, 0x46, 0x6d, 0x81, 0xad, 0xf3, 0x26, 0x7d, 0xb6, 0x84, 0x97, 0xcb, 0xe5, 0x3f, 0x16, 0xb5,
	0xd8, 0x06, 0xaf, 0xd3, 0xca, 0x52, 0x7b, 0xdf, 0xbb, 0x38, 0x67, 0x9b, 0xbc, 0x41, 0xf7, 0x4e,
	0xa5, 0x8a, 0x20, 0xec, 0xe3, 0x45, 0x0c, 0xba, 0xad, 0x67, 0x10, 0x61, 0x0c, 0x6c, 0x6b, 0x25,
	0xa6, 0xe7, 0xa4, 0x83, 0xbe, 0x91, 0xda, 0x2a, 0x97, 0xd5, 0xdb, 0x2e, 0xd6, 0x92, 0x89, 0xbb,
	0x42, 0xa3, 0x6e, 0x20, 0x64, 0x94, 0xef, 0x51, 0xd6, 0x05, 0x8b, 0x89, 0x09, 0xe0, 0x1d, 0xea,
	0x51, 0xa4, 0x02, 0xc7, 0x2a, 0x59, 0xe7, 0x07, 0xda, 0xfe, 0xa2, 0xac, 0xb3, 0xac, 0xba, 0x3a,
	0x79, 0x8e, 0xee, 0x14, 0x13, 0x1d, 0xb2, 0x9d, 0xac, 0x58, 0x17, 0x13, 0x07, 0xa6, 0xb8, 0x53,
	0x8d, 0x3f, 0xa5, 0xbb, 0x3d, 0x1c, 0xb9, 0x0f, 0x72, 0x0e, 0xe6, 0xed, 0x65, 0xa7, 0xc0, 0xf5,
	0x2c, 0xf1, 0x6c, 0xd0, 0x69, 0x9d, 0x81, 0x06, 0x23, 0xf3, 0x36, 0xcd, 0xcc, 0xdb, 0x02, 0x0b,
	0x46, 0xc9, 0x48, 0xdd, 0x00, 0x7b, 0xce, 0xab, 0x74, 0xab, 0x05, 0x32, 0x8c, 0x30, 0x98, 0xb0,
	0x17, 0xc5, 0x79, 0x0d, 0x04, 0x38, 0x03, 0x23, 0x87, 0x11, 0xb0, 0x97, 0x27, 0x47, 0x77, 0x0b,
	0x41, 0x7e, 0x2e, 0x84, 0x77, 0xbf, 0x10, 0xe4, 0x6b, 0x2a, 0xc8, 0x8f, 0x54, 0x78, 0xb7, 0xa9,
	0x20, 0x77, 0xa9, 0x20, 0xbf, 0x53, 0x41, 0xfe, 0xa6, 0xc2, 0xbb, 0x4f, 0x05, 0xf9, 0xf6, 0x47,
	0x78, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x9e, 0xd8, 0x12, 0xfc, 0x6a, 0x02, 0x00, 0x00,
}
