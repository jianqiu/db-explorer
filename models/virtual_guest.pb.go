// Code generated by protoc-gen-gogo.
// source: virtual_guest.proto
// DO NOT EDIT!

package models

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VirtualGuest_State int32

const (
	Using       VirtualGuest_State = 0
	Deleted     VirtualGuest_State = 1
	Unavailable VirtualGuest_State = 2
)

var VirtualGuest_State_name = map[int32]string{
	0: "Using",
	1: "Deleted",
	2: "Unavailable",
}
var VirtualGuest_State_value = map[string]int32{
	"Using":       0,
	"Deleted":     1,
	"Unavailable": 2,
}

func (x VirtualGuest_State) Enum() *VirtualGuest_State {
	p := new(VirtualGuest_State)
	*p = x
	return p
}
func (x VirtualGuest_State) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(VirtualGuest_State_name, int32(x))
}
func (x *VirtualGuest_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VirtualGuest_State_value, data, "VirtualGuest_State")
	if err != nil {
		return err
	}
	*x = VirtualGuest_State(value)
	return nil
}
func (VirtualGuest_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorVirtualGuest, []int{0, 0}
}

type VirtualGuest struct {
	Hostname       string             `protobuf:"bytes,2,opt,name=hostname" json:"hostname"`
	Cpu            int32              `protobuf:"varint,3,opt,name=cpu" json:"cpu"`
	MemoryMb       int32              `protobuf:"varint,4,opt,name=memory_mb,json=memoryMb" json:"memory_mb"`
	PublicVlan     int32              `protobuf:"varint,5,opt,name=public_vlan,json=publicVlan" json:"public_vlan"`
	PrivateVlan    int32              `protobuf:"varint,6,opt,name=private_vlan,json=privateVlan" json:"private_vlan"`
	State          VirtualGuest_State `protobuf:"varint,7,opt,name=state,enum=models.VirtualGuest_State" json:"state"`
	Cid            int32              `protobuf:"varint,1,opt,name=cid" json:"cid"`
	DeploymentName string             `protobuf:"bytes,8,opt,name=deployment_name,json=deploymentName" json:"deployment_name"`
	Ip             string             `protobuf:"bytes,10,opt,name=ip" json:"ip"`
	CreatedAt      int64              `protobuf:"varint,11,opt,name=created_at,json=createdAt" json:"created_at"`
	UpdatedAt      int64              `protobuf:"varint,12,opt,name=updated_at,json=updatedAt" json:"updated_at"`
}

func (m *VirtualGuest) Reset()                    { *m = VirtualGuest{} }
func (*VirtualGuest) ProtoMessage()               {}
func (*VirtualGuest) Descriptor() ([]byte, []int) { return fileDescriptorVirtualGuest, []int{0} }

func (m *VirtualGuest) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *VirtualGuest) GetCpu() int32 {
	if m != nil {
		return m.Cpu
	}
	return 0
}

func (m *VirtualGuest) GetMemoryMb() int32 {
	if m != nil {
		return m.MemoryMb
	}
	return 0
}

func (m *VirtualGuest) GetPublicVlan() int32 {
	if m != nil {
		return m.PublicVlan
	}
	return 0
}

func (m *VirtualGuest) GetPrivateVlan() int32 {
	if m != nil {
		return m.PrivateVlan
	}
	return 0
}

func (m *VirtualGuest) GetState() VirtualGuest_State {
	if m != nil {
		return m.State
	}
	return Using
}

func (m *VirtualGuest) GetCid() int32 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *VirtualGuest) GetDeploymentName() string {
	if m != nil {
		return m.DeploymentName
	}
	return ""
}

func (m *VirtualGuest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *VirtualGuest) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *VirtualGuest) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func init() {
	proto.RegisterType((*VirtualGuest)(nil), "models.VirtualGuest")
	proto.RegisterEnum("models.VirtualGuest_State", VirtualGuest_State_name, VirtualGuest_State_value)
}
func (x VirtualGuest_State) String() string {
	s, ok := VirtualGuest_State_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *VirtualGuest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VirtualGuest)
	if !ok {
		that2, ok := that.(VirtualGuest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	if this.Cpu != that1.Cpu {
		return false
	}
	if this.MemoryMb != that1.MemoryMb {
		return false
	}
	if this.PublicVlan != that1.PublicVlan {
		return false
	}
	if this.PrivateVlan != that1.PrivateVlan {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Cid != that1.Cid {
		return false
	}
	if this.DeploymentName != that1.DeploymentName {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	if this.UpdatedAt != that1.UpdatedAt {
		return false
	}
	return true
}
func (this *VirtualGuest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&models.VirtualGuest{")
	s = append(s, "Hostname: "+fmt.Sprintf("%#v", this.Hostname)+",\n")
	s = append(s, "Cpu: "+fmt.Sprintf("%#v", this.Cpu)+",\n")
	s = append(s, "MemoryMb: "+fmt.Sprintf("%#v", this.MemoryMb)+",\n")
	s = append(s, "PublicVlan: "+fmt.Sprintf("%#v", this.PublicVlan)+",\n")
	s = append(s, "PrivateVlan: "+fmt.Sprintf("%#v", this.PrivateVlan)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Cid: "+fmt.Sprintf("%#v", this.Cid)+",\n")
	s = append(s, "DeploymentName: "+fmt.Sprintf("%#v", this.DeploymentName)+",\n")
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringVirtualGuest(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringVirtualGuest(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *VirtualGuest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *VirtualGuest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintVirtualGuest(data, i, uint64(m.Cid))
	data[i] = 0x12
	i++
	i = encodeVarintVirtualGuest(data, i, uint64(len(m.Hostname)))
	i += copy(data[i:], m.Hostname)
	data[i] = 0x18
	i++
	i = encodeVarintVirtualGuest(data, i, uint64(m.Cpu))
	data[i] = 0x20
	i++
	i = encodeVarintVirtualGuest(data, i, uint64(m.MemoryMb))
	data[i] = 0x28
	i++
	i = encodeVarintVirtualGuest(data, i, uint64(m.PublicVlan))
	data[i] = 0x30
	i++
	i = encodeVarintVirtualGuest(data, i, uint64(m.PrivateVlan))
	data[i] = 0x38
	i++
	i = encodeVarintVirtualGuest(data, i, uint64(m.State))
	data[i] = 0x42
	i++
	i = encodeVarintVirtualGuest(data, i, uint64(len(m.DeploymentName)))
	i += copy(data[i:], m.DeploymentName)
	data[i] = 0x52
	i++
	i = encodeVarintVirtualGuest(data, i, uint64(len(m.Ip)))
	i += copy(data[i:], m.Ip)
	data[i] = 0x58
	i++
	i = encodeVarintVirtualGuest(data, i, uint64(m.CreatedAt))
	data[i] = 0x60
	i++
	i = encodeVarintVirtualGuest(data, i, uint64(m.UpdatedAt))
	return i, nil
}

func encodeFixed64VirtualGuest(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32VirtualGuest(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintVirtualGuest(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *VirtualGuest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovVirtualGuest(uint64(m.Cid))
	l = len(m.Hostname)
	n += 1 + l + sovVirtualGuest(uint64(l))
	n += 1 + sovVirtualGuest(uint64(m.Cpu))
	n += 1 + sovVirtualGuest(uint64(m.MemoryMb))
	n += 1 + sovVirtualGuest(uint64(m.PublicVlan))
	n += 1 + sovVirtualGuest(uint64(m.PrivateVlan))
	n += 1 + sovVirtualGuest(uint64(m.State))
	l = len(m.DeploymentName)
	n += 1 + l + sovVirtualGuest(uint64(l))
	l = len(m.Ip)
	n += 1 + l + sovVirtualGuest(uint64(l))
	n += 1 + sovVirtualGuest(uint64(m.CreatedAt))
	n += 1 + sovVirtualGuest(uint64(m.UpdatedAt))
	return n
}

func sovVirtualGuest(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVirtualGuest(x uint64) (n int) {
	return sovVirtualGuest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *VirtualGuest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualGuest{`,
		`Cid:` + fmt.Sprintf("%v", this.Cid) + `,`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`Cpu:` + fmt.Sprintf("%v", this.Cpu) + `,`,
		`MemoryMb:` + fmt.Sprintf("%v", this.MemoryMb) + `,`,
		`PublicVlan:` + fmt.Sprintf("%v", this.PublicVlan) + `,`,
		`PrivateVlan:` + fmt.Sprintf("%v", this.PrivateVlan) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`DeploymentName:` + fmt.Sprintf("%v", this.DeploymentName) + `,`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`CreatedAt:` + fmt.Sprintf("%v", this.CreatedAt) + `,`,
		`UpdatedAt:` + fmt.Sprintf("%v", this.UpdatedAt) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringVirtualGuest(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *VirtualGuest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVirtualGuest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualGuest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualGuest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualGuest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Cid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualGuest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVirtualGuest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			m.Cpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualGuest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Cpu |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryMb", wireType)
			}
			m.MemoryMb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualGuest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MemoryMb |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicVlan", wireType)
			}
			m.PublicVlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualGuest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.PublicVlan |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateVlan", wireType)
			}
			m.PrivateVlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualGuest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.PrivateVlan |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualGuest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.State |= (VirtualGuest_State(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualGuest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVirtualGuest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualGuest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVirtualGuest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualGuest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVirtualGuest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.UpdatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVirtualGuest(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVirtualGuest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVirtualGuest(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVirtualGuest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVirtualGuest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVirtualGuest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVirtualGuest
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVirtualGuest
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVirtualGuest(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVirtualGuest = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVirtualGuest   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("virtual_guest.proto", fileDescriptorVirtualGuest) }

var fileDescriptorVirtualGuest = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x6e, 0xd4, 0x30,
	0x1c, 0xc6, 0xe3, 0xbb, 0xa6, 0xbd, 0xfc, 0x73, 0x6a, 0x4f, 0x06, 0x21, 0xab, 0x83, 0x09, 0x45,
	0x88, 0x0c, 0x34, 0x45, 0x0c, 0xec, 0xad, 0x90, 0x98, 0x60, 0x00, 0xb5, 0x6b, 0xe4, 0x24, 0x26,
	0xb5, 0xe4, 0xc4, 0x56, 0x62, 0x47, 0xea, 0xc6, 0x23, 0xf0, 0x18, 0x3c, 0x4a, 0x07, 0x86, 0x8e,
	0x4c, 0x88, 0x0b, 0x0b, 0xe3, 0x3d, 0x02, 0x8a, 0x13, 0x20, 0xdd, 0xe2, 0xef, 0xf7, 0xfb, 0xac,
	0x7c, 0x86, 0x07, 0x9d, 0x68, 0x8c, 0x65, 0x32, 0x2d, 0x2d, 0x6f, 0x4d, 0xa2, 0x1b, 0x65, 0x14,
	0xde, 0xaf, 0x54, 0xc1, 0x65, 0x7b, 0x7c, 0x5a, 0x0a, 0x73, 0x6d, 0xb3, 0x24, 0x57, 0xd5, 0x59,
	0xa9, 0x4a, 0x75, 0xe6, 0x70, 0x66, 0x3f, 0xb9, 0x93, 0x3b, 0xb8, 0xaf, 0xb1, 0x76, 0xf2, 0x6d,
	0x09, 0xeb, 0xab, 0xf1, 0xba, 0xb7, 0xc3, 0x6d, 0xf8, 0x11, 0x2c, 0x73, 0x51, 0x10, 0x14, 0xa1,
	0xd8, 0xbf, 0xd8, 0xbb, 0xfd, 0xf1, 0xd8, 0xfb, 0x30, 0x04, 0x38, 0x82, 0xd5, 0xb5, 0x6a, 0x4d,
	0xcd, 0x2a, 0x4e, 0x16, 0x11, 0x8a, 0x83, 0x09, 0xfe, 0x4b, 0x5d, 0x53, 0x5b, 0xb2, 0xbc, 0xd7,
	0xd4, 0x16, 0x3f, 0x81, 0xa0, 0xe2, 0x95, 0x6a, 0x6e, 0xd2, 0x2a, 0x23, 0x7b, 0x33, 0xba, 0x1a,
	0xe3, 0x77, 0x19, 0x7e, 0x06, 0xa1, 0xb6, 0x99, 0x14, 0x79, 0xda, 0x49, 0x56, 0x13, 0x7f, 0x26,
	0xc1, 0x08, 0xae, 0x24, 0xab, 0xf1, 0x73, 0x58, 0xeb, 0x46, 0x74, 0xcc, 0xf0, 0xd1, 0xdb, 0x9f,
	0x79, 0xe1, 0x44, 0x9c, 0xf8, 0x1a, 0xfc, 0xd6, 0x30, 0xc3, 0xc9, 0x41, 0x84, 0xe2, 0xc3, 0x57,
	0xc7, 0xc9, 0xf8, 0x38, 0xc9, 0x7c, 0x69, 0xf2, 0x71, 0x30, 0xa6, 0xf6, 0xa8, 0xe3, 0x53, 0x38,
	0x2a, 0xb8, 0x96, 0xea, 0xa6, 0xe2, 0xb5, 0x49, 0xdd, 0xd6, 0xd5, 0x6c, 0xeb, 0xe1, 0x7f, 0xf8,
	0x7e, 0x58, 0xfc, 0x10, 0x16, 0x42, 0x13, 0x98, 0x19, 0x0b, 0xa1, 0xf1, 0x53, 0x80, 0xbc, 0xe1,
	0xcc, 0xf0, 0x22, 0x65, 0x86, 0x84, 0x11, 0x8a, 0x97, 0x13, 0x0d, 0xa6, 0xfc, 0xdc, 0x0c, 0x92,
	0xd5, 0xc5, 0x5f, 0x69, 0x3d, 0x97, 0xa6, 0xfc, 0xdc, 0x9c, 0xbc, 0x04, 0xdf, 0xfd, 0x24, 0x0e,
	0xc0, 0xbf, 0x6c, 0x45, 0x5d, 0x6e, 0x3c, 0x1c, 0xc2, 0xc1, 0x1b, 0x2e, 0xb9, 0xe1, 0xc5, 0x06,
	0xe1, 0x23, 0x08, 0x2f, 0x6b, 0xd6, 0x31, 0x21, 0x59, 0x26, 0xf9, 0x66, 0x71, 0xf1, 0xe2, 0x6e,
	0x4b, 0xbd, 0xef, 0x5b, 0xea, 0xed, 0xb6, 0x14, 0x7d, 0xee, 0x29, 0xfa, 0xda, 0x53, 0x74, 0xdb,
	0x53, 0x74, 0xd7, 0x53, 0xf4, 0xb3, 0xa7, 0xe8, 0x77, 0x4f, 0xbd, 0x5d, 0x4f, 0xd1, 0x97, 0x5f,
	0xd4, 0xfb, 0x13, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x2a, 0x4b, 0x2a, 0x49, 0x02, 0x00, 0x00,
}
