// Code generated by protoc-gen-gogo.
// source: vm_requests.proto
// DO NOT EDIT!

package models

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VMLifecycleResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *VMLifecycleResponse) Reset()                    { *m = VMLifecycleResponse{} }
func (*VMLifecycleResponse) ProtoMessage()               {}
func (*VMLifecycleResponse) Descriptor() ([]byte, []int) { return fileDescriptorVmRequests, []int{0} }

func (m *VMLifecycleResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type VMsRequest struct {
	PublicVlan  int32 `protobuf:"varint,1,opt,name=public_vlan,json=publicVlan" json:"public_vlan"`
	PrivateVlan int32 `protobuf:"varint,2,opt,name=private_vlan,json=privateVlan" json:"private_vlan"`
	Cpu         int32 `protobuf:"varint,3,opt,name=cpu" json:"cpu"`
	MemoryMb    int32 `protobuf:"varint,4,opt,name=memory_mb,json=memoryMb" json:"memory_mb"`
}

func (m *VMsRequest) Reset()                    { *m = VMsRequest{} }
func (*VMsRequest) ProtoMessage()               {}
func (*VMsRequest) Descriptor() ([]byte, []int) { return fileDescriptorVmRequests, []int{1} }

func (m *VMsRequest) GetPublicVlan() int32 {
	if m != nil {
		return m.PublicVlan
	}
	return 0
}

func (m *VMsRequest) GetPrivateVlan() int32 {
	if m != nil {
		return m.PrivateVlan
	}
	return 0
}

func (m *VMsRequest) GetCpu() int32 {
	if m != nil {
		return m.Cpu
	}
	return 0
}

func (m *VMsRequest) GetMemoryMb() int32 {
	if m != nil {
		return m.MemoryMb
	}
	return 0
}

type VMsResponse struct {
	Error *Error          `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Vms   []*VirtualGuest `protobuf:"bytes,2,rep,name=vms" json:"vms,omitempty"`
}

func (m *VMsResponse) Reset()                    { *m = VMsResponse{} }
func (*VMsResponse) ProtoMessage()               {}
func (*VMsResponse) Descriptor() ([]byte, []int) { return fileDescriptorVmRequests, []int{2} }

func (m *VMsResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *VMsResponse) GetVms() []*VirtualGuest {
	if m != nil {
		return m.Vms
	}
	return nil
}

type VMByCidRequest struct {
	Cid int32 `protobuf:"varint,1,opt,name=cid" json:"cid"`
}

func (m *VMByCidRequest) Reset()                    { *m = VMByCidRequest{} }
func (*VMByCidRequest) ProtoMessage()               {}
func (*VMByCidRequest) Descriptor() ([]byte, []int) { return fileDescriptorVmRequests, []int{3} }

func (m *VMByCidRequest) GetCid() int32 {
	if m != nil {
		return m.Cid
	}
	return 0
}

type VMResponse struct {
	Error *Error        `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Vm    *VirtualGuest `protobuf:"bytes,2,opt,name=vm" json:"vm,omitempty"`
}

func (m *VMResponse) Reset()                    { *m = VMResponse{} }
func (*VMResponse) ProtoMessage()               {}
func (*VMResponse) Descriptor() ([]byte, []int) { return fileDescriptorVmRequests, []int{4} }

func (m *VMResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *VMResponse) GetVm() *VirtualGuest {
	if m != nil {
		return m.Vm
	}
	return nil
}

func init() {
	proto.RegisterType((*VMLifecycleResponse)(nil), "models.VMLifecycleResponse")
	proto.RegisterType((*VMsRequest)(nil), "models.VMsRequest")
	proto.RegisterType((*VMsResponse)(nil), "models.VMsResponse")
	proto.RegisterType((*VMByCidRequest)(nil), "models.VMByCidRequest")
	proto.RegisterType((*VMResponse)(nil), "models.VMResponse")
}
func (this *VMLifecycleResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VMLifecycleResponse)
	if !ok {
		that2, ok := that.(VMLifecycleResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *VMsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VMsRequest)
	if !ok {
		that2, ok := that.(VMsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PublicVlan != that1.PublicVlan {
		return false
	}
	if this.PrivateVlan != that1.PrivateVlan {
		return false
	}
	if this.Cpu != that1.Cpu {
		return false
	}
	if this.MemoryMb != that1.MemoryMb {
		return false
	}
	return true
}
func (this *VMsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VMsResponse)
	if !ok {
		that2, ok := that.(VMsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if len(this.Vms) != len(that1.Vms) {
		return false
	}
	for i := range this.Vms {
		if !this.Vms[i].Equal(that1.Vms[i]) {
			return false
		}
	}
	return true
}
func (this *VMByCidRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VMByCidRequest)
	if !ok {
		that2, ok := that.(VMByCidRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Cid != that1.Cid {
		return false
	}
	return true
}
func (this *VMResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VMResponse)
	if !ok {
		that2, ok := that.(VMResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if !this.Vm.Equal(that1.Vm) {
		return false
	}
	return true
}
func (this *VMLifecycleResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.VMLifecycleResponse{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VMsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&models.VMsRequest{")
	s = append(s, "PublicVlan: "+fmt.Sprintf("%#v", this.PublicVlan)+",\n")
	s = append(s, "PrivateVlan: "+fmt.Sprintf("%#v", this.PrivateVlan)+",\n")
	s = append(s, "Cpu: "+fmt.Sprintf("%#v", this.Cpu)+",\n")
	s = append(s, "MemoryMb: "+fmt.Sprintf("%#v", this.MemoryMb)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VMsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.VMsResponse{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	if this.Vms != nil {
		s = append(s, "Vms: "+fmt.Sprintf("%#v", this.Vms)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VMByCidRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.VMByCidRequest{")
	s = append(s, "Cid: "+fmt.Sprintf("%#v", this.Cid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VMResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.VMResponse{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	if this.Vm != nil {
		s = append(s, "Vm: "+fmt.Sprintf("%#v", this.Vm)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringVmRequests(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringVmRequests(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *VMLifecycleResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *VMLifecycleResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		data[i] = 0xa
		i++
		i = encodeVarintVmRequests(data, i, uint64(m.Error.Size()))
		n1, err := m.Error.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *VMsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *VMsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintVmRequests(data, i, uint64(m.PublicVlan))
	data[i] = 0x10
	i++
	i = encodeVarintVmRequests(data, i, uint64(m.PrivateVlan))
	data[i] = 0x18
	i++
	i = encodeVarintVmRequests(data, i, uint64(m.Cpu))
	data[i] = 0x20
	i++
	i = encodeVarintVmRequests(data, i, uint64(m.MemoryMb))
	return i, nil
}

func (m *VMsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *VMsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		data[i] = 0xa
		i++
		i = encodeVarintVmRequests(data, i, uint64(m.Error.Size()))
		n2, err := m.Error.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Vms) > 0 {
		for _, msg := range m.Vms {
			data[i] = 0x12
			i++
			i = encodeVarintVmRequests(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VMByCidRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *VMByCidRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintVmRequests(data, i, uint64(m.Cid))
	return i, nil
}

func (m *VMResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *VMResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		data[i] = 0xa
		i++
		i = encodeVarintVmRequests(data, i, uint64(m.Error.Size()))
		n3, err := m.Error.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Vm != nil {
		data[i] = 0x12
		i++
		i = encodeVarintVmRequests(data, i, uint64(m.Vm.Size()))
		n4, err := m.Vm.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func encodeFixed64VmRequests(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32VmRequests(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintVmRequests(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *VMLifecycleResponse) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovVmRequests(uint64(l))
	}
	return n
}

func (m *VMsRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovVmRequests(uint64(m.PublicVlan))
	n += 1 + sovVmRequests(uint64(m.PrivateVlan))
	n += 1 + sovVmRequests(uint64(m.Cpu))
	n += 1 + sovVmRequests(uint64(m.MemoryMb))
	return n
}

func (m *VMsResponse) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovVmRequests(uint64(l))
	}
	if len(m.Vms) > 0 {
		for _, e := range m.Vms {
			l = e.Size()
			n += 1 + l + sovVmRequests(uint64(l))
		}
	}
	return n
}

func (m *VMByCidRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovVmRequests(uint64(m.Cid))
	return n
}

func (m *VMResponse) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovVmRequests(uint64(l))
	}
	if m.Vm != nil {
		l = m.Vm.Size()
		n += 1 + l + sovVmRequests(uint64(l))
	}
	return n
}

func sovVmRequests(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVmRequests(x uint64) (n int) {
	return sovVmRequests(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *VMLifecycleResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VMLifecycleResponse{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Error", "Error", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VMsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VMsRequest{`,
		`PublicVlan:` + fmt.Sprintf("%v", this.PublicVlan) + `,`,
		`PrivateVlan:` + fmt.Sprintf("%v", this.PrivateVlan) + `,`,
		`Cpu:` + fmt.Sprintf("%v", this.Cpu) + `,`,
		`MemoryMb:` + fmt.Sprintf("%v", this.MemoryMb) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VMsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VMsResponse{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Error", "Error", 1) + `,`,
		`Vms:` + strings.Replace(fmt.Sprintf("%v", this.Vms), "VirtualGuest", "VirtualGuest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VMByCidRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VMByCidRequest{`,
		`Cid:` + fmt.Sprintf("%v", this.Cid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VMResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VMResponse{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Error", "Error", 1) + `,`,
		`Vm:` + strings.Replace(fmt.Sprintf("%v", this.Vm), "VirtualGuest", "VirtualGuest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringVmRequests(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *VMLifecycleResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMLifecycleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMLifecycleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmRequests
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmRequests(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicVlan", wireType)
			}
			m.PublicVlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.PublicVlan |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateVlan", wireType)
			}
			m.PrivateVlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.PrivateVlan |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			m.Cpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Cpu |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryMb", wireType)
			}
			m.MemoryMb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MemoryMb |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVmRequests(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmRequests
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmRequests
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vms = append(m.Vms, &VirtualGuest{})
			if err := m.Vms[len(m.Vms)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmRequests(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMByCidRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMByCidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMByCidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Cid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVmRequests(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmRequests
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmRequests
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vm == nil {
				m.Vm = &VirtualGuest{}
			}
			if err := m.Vm.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmRequests(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVmRequests(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVmRequests
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVmRequests
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVmRequests
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVmRequests
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVmRequests
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVmRequests(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVmRequests = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVmRequests   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("vm_requests.proto", fileDescriptorVmRequests) }

var fileDescriptorVmRequests = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x90, 0xbd, 0x4e, 0xfb, 0x30,
	0x14, 0xc5, 0xe3, 0xa4, 0xfd, 0xeb, 0x8f, 0x03, 0x48, 0xa4, 0x08, 0x45, 0x1d, 0x4c, 0x09, 0x5f,
	0x1d, 0x20, 0x95, 0x3a, 0x32, 0x16, 0x21, 0x16, 0xb2, 0x64, 0x08, 0x12, 0x4b, 0x94, 0xa4, 0x6e,
	0x88, 0x14, 0xd7, 0xc1, 0xf9, 0x90, 0xba, 0xf1, 0x08, 0x6c, 0xbc, 0x02, 0x8f, 0xd2, 0xb1, 0x23,
	0x13, 0xa2, 0x61, 0x61, 0xec, 0x23, 0x20, 0xdb, 0xad, 0x54, 0x06, 0x86, 0x6e, 0xb9, 0xe7, 0xfc,
	0x6e, 0x7c, 0xce, 0x85, 0x7b, 0x15, 0xf1, 0x19, 0x7e, 0x2a, 0x71, 0x5e, 0xe4, 0x76, 0xc6, 0x68,
	0x41, 0x8d, 0x7f, 0x84, 0x0e, 0x71, 0x9a, 0xb7, 0x2f, 0xe3, 0xa4, 0x78, 0x2c, 0x43, 0x3b, 0xa2,
	0xa4, 0x17, 0xd3, 0x98, 0xf6, 0x84, 0x1d, 0x96, 0x23, 0x31, 0x89, 0x41, 0x7c, 0xc9, 0xb5, 0x76,
	0xab, 0x4a, 0x58, 0x51, 0x06, 0xa9, 0x1f, 0xf3, 0x9f, 0x2d, 0x45, 0x1d, 0x33, 0x46, 0x99, 0x1c,
	0xac, 0x2b, 0xd8, 0xf2, 0x9c, 0xbb, 0x64, 0x84, 0xa3, 0x49, 0x94, 0x62, 0x17, 0xe7, 0x19, 0x1d,
	0xe7, 0xd8, 0x38, 0x86, 0x4d, 0x41, 0x99, 0xa0, 0x03, 0xba, 0x7a, 0x7f, 0xc7, 0x96, 0xef, 0xdb,
	0x37, 0x5c, 0x74, 0xa5, 0x67, 0xbd, 0x02, 0x08, 0x3d, 0x27, 0x77, 0x65, 0x54, 0xe3, 0x14, 0xea,
	0x59, 0x19, 0xa6, 0x49, 0xe4, 0x57, 0x69, 0x30, 0x16, 0x9b, 0xcd, 0x41, 0x63, 0xfa, 0x71, 0xa8,
	0xb8, 0x50, 0x1a, 0x5e, 0x1a, 0x8c, 0x8d, 0x73, 0xb8, 0x9d, 0xb1, 0xa4, 0x0a, 0x0a, 0x2c, 0x39,
	0x75, 0x8d, 0xd3, 0x97, 0x8e, 0x00, 0x0f, 0xa0, 0x16, 0x65, 0xa5, 0xa9, 0xad, 0xf9, 0x5c, 0x30,
	0x8e, 0xe0, 0x16, 0xc1, 0x84, 0xb2, 0x89, 0x4f, 0x42, 0xb3, 0xb1, 0xe6, 0xfe, 0x97, 0xb2, 0x13,
	0x5a, 0x0f, 0x50, 0x17, 0xc1, 0x36, 0x68, 0x63, 0x9c, 0x41, 0xad, 0x22, 0xb9, 0xa9, 0x76, 0xb4,
	0xae, 0xde, 0xdf, 0x5f, 0x21, 0x9e, 0x3c, 0xe0, 0x2d, 0x6f, 0xe8, 0x72, 0xc0, 0xea, 0xc2, 0x5d,
	0xcf, 0x19, 0x4c, 0xae, 0x93, 0xe1, 0xaa, 0x38, 0x0f, 0x9a, 0x0c, 0x7f, 0x15, 0xe6, 0x82, 0x75,
	0xcf, 0xcf, 0xb3, 0x59, 0x88, 0x13, 0xa8, 0x56, 0x44, 0x9c, 0xe4, 0xaf, 0x0c, 0x6a, 0x45, 0x06,
	0x17, 0xb3, 0x39, 0x52, 0xde, 0xe7, 0x48, 0x59, 0xcc, 0x11, 0x78, 0xae, 0x11, 0x78, 0xab, 0x11,
	0x98, 0xd6, 0x08, 0xcc, 0x6a, 0x04, 0x3e, 0x6b, 0x04, 0xbe, 0x6b, 0xa4, 0x2c, 0x6a, 0x04, 0x5e,
	0xbe, 0x90, 0xf2, 0x13, 0x00, 0x00, 0xff, 0xff, 0xa9, 0xde, 0x86, 0x34, 0x4f, 0x02, 0x00, 0x00,
}
