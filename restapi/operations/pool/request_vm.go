package pool

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// RequestVMHandlerFunc turns a function with the right signature into a request VM handler
type RequestVMHandlerFunc func(RequestVMParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RequestVMHandlerFunc) Handle(params RequestVMParams) middleware.Responder {
	return fn(params)
}

// RequestVMHandler interface for that can handle valid request VM params
type RequestVMHandler interface {
	Handle(RequestVMParams) middleware.Responder
}

// NewRequestVM creates a new http.Handler for the request VM operation
func NewRequestVM(ctx *middleware.Context, handler RequestVMHandler) *RequestVM {
	return &RequestVM{Context: ctx, Handler: handler}
}

/*RequestVM swagger:route POST /pool/requestvm Pool requestVm

Request a VM from the pool

Request a VM from the pool

*/
type RequestVM struct {
	Context *middleware.Context
	Handler RequestVMHandler
}

func (o *RequestVM) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewRequestVMParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
