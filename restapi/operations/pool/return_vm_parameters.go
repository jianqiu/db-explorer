package pool

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewReturnVMParams creates a new ReturnVMParams object
// with the default values initialized.
func NewReturnVMParams() ReturnVMParams {
	var ()
	return ReturnVMParams{}
}

// ReturnVMParams contains all the bound params for the return VM operation
// typically these are obtained from a http.Request
//
// swagger:parameters returnVM
type ReturnVMParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*VM ID
	  Required: true
	  In: query
	*/
	VMID int32
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *ReturnVMParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qVMID, qhkVMID, _ := qs.GetOK("vm_id")
	if err := o.bindVMID(qVMID, qhkVMID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ReturnVMParams) bindVMID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("vm_id", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("vm_id", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("vm_id", "query", "int32", raw)
	}
	o.VMID = value

	return nil
}
